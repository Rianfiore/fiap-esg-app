name: 🚀 CI/CD Complete Pipeline - CompareJa

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  ANDROID_COMPILE_SDK: 34
  ANDROID_BUILD_TOOLS: 34.0.0

jobs:
  # 1️⃣ BUILD
  build:
    name: 🏗️ Build APKs
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: ☕ Setup Java 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 📱 Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: ${{ env.ANDROID_COMPILE_SDK }}
        build-tools: ${{ env.ANDROID_BUILD_TOOLS }}
        
    - name: 💾 Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: 🔧 Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: 🧹 Clean previous builds
      run: ./gradlew clean
      
    - name: 📦 Build Debug APK
      run: ./gradlew assembleDebug
      
    - name: 📦 Build Release APK
      run: ./gradlew assembleRelease
      
    - name: 📤 Upload Debug APK
      uses: actions/upload-artifact@v4
      with:
        name: app-debug-apk
        path: app/build/outputs/apk/debug/app-debug.apk
        retention-days: 30
        
    - name: 📤 Upload Release APK
      uses: actions/upload-artifact@v4
      with:
        name: app-release-apk
        path: app/build/outputs/apk/release/app-release.apk
        retention-days: 30
        
    - name: 📊 Build Summary
      run: |
        echo "✅ Build concluído com sucesso!"
        echo "📱 APK Debug: $(ls -la app/build/outputs/apk/debug/)"
        echo "📱 APK Release: $(ls -la app/build/outputs/apk/release/)"

  # 2️⃣ TESTS (depende do build)
  tests:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: ☕ Setup Java 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 📱 Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: ${{ env.ANDROID_COMPILE_SDK }}
        build-tools: ${{ env.ANDROID_BUILD_TOOLS }}
        
    - name: 💾 Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: 🔧 Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: 🧪 Run Unit Tests
      run: ./gradlew testDebugUnitTest
      
    - name: 🔍 Run Lint Analysis
      run: ./gradlew lintDebug
      
    - name: 📊 Generate Test Coverage Report
      run: ./gradlew jacocoTestReport
      
    - name: 📤 Upload Test Results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: app/build/test-results/
        retention-days: 30
        
    - name: 📤 Upload Coverage Report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: app/build/reports/jacoco/
        retention-days: 30
        
    - name: 📊 Test Summary
      run: |
        echo "✅ Testes concluídos com sucesso!"
        echo "📊 Relatório de cobertura gerado em: app/build/reports/jacoco/"

  # 3️⃣ DEPLOY (depende do build e tests)
  deploy:
    name: 🚀 Deploy APKs
    runs-on: ubuntu-latest
    needs: [build, tests]
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 📥 Download APK
      uses: actions/download-artifact@v4
      with:
        name: ${{ github.ref == 'refs/heads/develop' && 'app-debug-apk' || 'app-release-apk' }}
        path: ./apk/
        
    - name: 📤 Upload APK para Download
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.ref == 'refs/heads/develop' && 'app-staging' || 'app-production' }}-${{ github.sha }}
        path: ./apk/
        retention-days: 30
        
    - name: 📊 Deploy Summary
      run: |
        if [ "${{ github.ref }}" == "refs/heads/develop" ]; then
          echo "✅ Deploy para STAGING concluído!"
          echo "📱 APK disponível para download: app-staging-${{ github.sha }}"
          echo "🔗 Acesse: Actions → Artifacts"
        else
          echo "✅ Deploy para PRODUÇÃO concluído!"
          echo "📱 APK disponível para download: app-production-${{ github.sha }}"
          echo "🔗 Acesse: Actions → Artifacts"
        fi

  # 4️⃣ RELEASE (depende do build)
  release:
    name: 🏷️ Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build, tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 📥 Download Production APK
      uses: actions/download-artifact@v4
      with:
        name: app-release-apk
        path: ./release/
        
    - name: 🏷️ Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: CompareJa v${{ github.run_number }} - Production
        body: |
          ## 🚀 CompareJa v${{ github.run_number }} - Production Release
          
          ### 📱 APK Download
          - **APK:** `app-release.apk`
          - **Build:** #${{ github.run_number }}
          - **Commit:** ${{ github.sha }}
          - **Branch:** ${{ github.ref_name }}
          
          ### 🔧 Changes
          - Automated build and deployment
          - All tests passed ✅
          - Code coverage report included
          
          ### 📊 Build Info
          - **Build Date:** $(date)
          - **Pipeline:** [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
        draft: false
        prerelease: false
        
    - name: 📤 Upload APK to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release/app-release.apk
        asset_name: CompareJa-v${{ github.run_number }}-production.apk
        asset_content_type: application/vnd.android.package-archive
        
    - name: 📊 Release Summary
      run: |
        echo "✅ GitHub Release criada com sucesso!"
        echo "🏷️ Tag: v${{ github.run_number }}"
        echo "📱 APK anexado: CompareJa-v${{ github.run_number }}-production.apk"
        echo "🔗 Release: https://github.com/${{ github.repository }}/releases/tag/v${{ github.run_number }}"
