name: 🚀 DEPLOY Pipeline - CompareJa

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Ambiente para deploy'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  ANDROID_COMPILE_SDK: 34
  ANDROID_BUILD_TOOLS: 34.0.0

jobs:
  deploy-staging:
    name: 🚀 Deploy Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: ☕ Setup Java 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 📱 Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: ${{ env.ANDROID_COMPILE_SDK }}
        build-tools: ${{ env.ANDROID_BUILD_TOOLS }}
        
    - name: 💾 Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: 🔧 Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: 🏗️ Build Debug APK
      run: ./gradlew assembleDebug
        
    - name: 🔧 Setup Firebase CLI
      run: |
        npm install -g firebase-tools
        
    - name: 🔐 Firebase Authentication
      env:
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      run: |
        firebase login --token $FIREBASE_TOKEN
        
    - name: 🚀 Deploy to Firebase App Distribution (Staging)
      env:
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      run: |
        firebase appdistribution:distribute app/build/outputs/apk/debug/app-debug.apk \
          --app ${{ secrets.FIREBASE_APP_ID_STAGING }} \
          --groups "testers" \
          --release-notes "🚀 Staging Build - $(date +'%Y-%m-%d %H:%M:%S') - Branch: ${{ github.ref_name }}"
          
    - name: 📊 Deploy Summary (Staging)
      run: |
        echo "✅ Deploy para STAGING concluído!"
        echo "📱 APK enviado para grupo: testers"
        echo "🔗 Link: https://console.firebase.google.com/project/${{ secrets.FIREBASE_PROJECT_ID }}/appdistribution"

  deploy-production:
    name: 🚀 Deploy Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: ☕ Setup Java 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 📱 Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: ${{ env.ANDROID_COMPILE_SDK }}
        build-tools: ${{ env.ANDROID_BUILD_TOOLS }}
        
    - name: 💾 Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: 🔧 Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: 🏗️ Build Release APK
      run: ./gradlew assembleRelease
        
    - name: 🔧 Setup Firebase CLI
      run: |
        npm install -g firebase-tools
        
    - name: 🔐 Firebase Authentication
      env:
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      run: |
        firebase login --token $FIREBASE_TOKEN
        
    - name: 🚀 Deploy to Firebase App Distribution (Production)
      env:
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      run: |
        firebase appdistribution:distribute app/build/outputs/apk/release/app-release.apk \
          --app ${{ secrets.FIREBASE_APP_ID_PRODUCTION }} \
          --groups "production-testers" \
          --release-notes "🚀 Production Build - $(date +'%Y-%m-%d %H:%M:%S') - Branch: ${{ github.ref_name }}"
          
    - name: 📊 Deploy Summary (Production)
      run: |
        echo "✅ Deploy para PRODUÇÃO concluído!"
        echo "📱 APK enviado para grupo: production-testers"
        echo "🔗 Link: https://console.firebase.google.com/project/${{ secrets.FIREBASE_PROJECT_ID }}/appdistribution"

  notify-deploy:
    name: 📢 Notify Deploy
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
    - name: 📢 Deploy Notification
      run: |
        echo "🎉 Deploy realizado com sucesso!"
        echo "📱 Aplicação CompareJa disponível para download"
        echo "⏰ Timestamp: $(date)"
        echo "🌿 Branch: ${{ github.ref_name }}"
        echo "👤 Autor: ${{ github.actor }}"
